// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using PostsImages.Models;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace PostsImages.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace PostsImages.Services
{
    using PostsImages.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPhotosApi : IPhotosApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPhotosApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ObservableCollection<Photos>> IPhotosApi.GetMakeUpsid()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMakeUpsid", new Type[] {  });
            return (Task<ObservableCollection<Photos>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ObservableCollection<InfoUser>> IPhotosApi.GetMakeUpsid(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMakeUpsid", new Type[] { typeof(string) });
            return (Task<ObservableCollection<InfoUser>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ObservableCollection<Albums>> IPhotosApi.GetMakeUpsalbum(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMakeUpsalbum", new Type[] { typeof(string) });
            return (Task<ObservableCollection<Albums>>)func(Client, arguments);
        }
    }
}

namespace PostsImages.Services
{
    using PostsImages.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserInfoApi : IUserInfoApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserInfoApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ObservableCollection<InfoUser>> IUserInfoApi.GetMakeUps(string username)
        {
            var arguments = new object[] { username };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMakeUps", new Type[] { typeof(string) });
            return (Task<ObservableCollection<InfoUser>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ObservableCollection<UserModel>> IUserInfoApi.GetMakeUpsid(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMakeUpsid", new Type[] { typeof(string) });
            return (Task<ObservableCollection<UserModel>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<InfoUser> IUserInfoApi.CreateMakeUp(InfoUser makeUp, string token)
        {
            var arguments = new object[] { makeUp, token };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateMakeUp", new Type[] { typeof(InfoUser), typeof(string) });
            return (Task<InfoUser>)func(Client, arguments);
        }
    }
}
